
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b50  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000ce4  08000ce4  00001ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cf4  08000cf4  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000cf4  08000cf4  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cf4  08000cf4  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cf4  08000cf4  00001cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cf8  08000cf8  00001cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000cfc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000d58  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000d58  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008d0  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002dd  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00002c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b8  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cac  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001194  00000000  00000000  00005aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000096c5  00000000  00000000  00006c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009a8  00000000  00000000  00010348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00010cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ccc 	.word	0x08000ccc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08000ccc 	.word	0x08000ccc

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	printf("hello, world!\n");
 80001d8:	4802      	ldr	r0, [pc, #8]	@ (80001e4 <main+0x10>)
 80001da:	f000 f9e7 	bl	80005ac <puts>
	for(;;);
 80001de:	bf00      	nop
 80001e0:	e7fd      	b.n	80001de <main+0xa>
 80001e2:	bf00      	nop
 80001e4:	08000ce4 	.word	0x08000ce4

080001e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	617b      	str	r3, [r7, #20]
 80001f8:	e00a      	b.n	8000210 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80001fa:	f3af 8000 	nop.w
 80001fe:	4601      	mov	r1, r0
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	1c5a      	adds	r2, r3, #1
 8000204:	60ba      	str	r2, [r7, #8]
 8000206:	b2ca      	uxtb	r2, r1
 8000208:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	3301      	adds	r3, #1
 800020e:	617b      	str	r3, [r7, #20]
 8000210:	697a      	ldr	r2, [r7, #20]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	429a      	cmp	r2, r3
 8000216:	dbf0      	blt.n	80001fa <_read+0x12>
  }

  return len;
 8000218:	687b      	ldr	r3, [r7, #4]
}
 800021a:	4618      	mov	r0, r3
 800021c:	3718      	adds	r7, #24
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}

08000222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000222:	b580      	push	{r7, lr}
 8000224:	b086      	sub	sp, #24
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e009      	b.n	8000248 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	1c5a      	adds	r2, r3, #1
 8000238:	60ba      	str	r2, [r7, #8]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	3301      	adds	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
 8000248:	697a      	ldr	r2, [r7, #20]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	429a      	cmp	r2, r3
 800024e:	dbf1      	blt.n	8000234 <_write+0x12>
  }
  return len;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}

0800025a <_close>:

int _close(int file)
{
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000266:	4618      	mov	r0, r3
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000280:	605a      	str	r2, [r3, #4]
  return 0;
 8000282:	2300      	movs	r3, #0
}
 8000284:	4618      	mov	r0, r3
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr

0800028e <_isatty>:

int _isatty(int file)
{
 800028e:	b480      	push	{r7}
 8000290:	b083      	sub	sp, #12
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000296:	2301      	movs	r3, #1
}
 8000298:	4618      	mov	r0, r3
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr

080002a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b085      	sub	sp, #20
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	60f8      	str	r0, [r7, #12]
 80002aa:	60b9      	str	r1, [r7, #8]
 80002ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002ae:	2300      	movs	r3, #0
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
	...

080002bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002c4:	4a14      	ldr	r2, [pc, #80]	@ (8000318 <_sbrk+0x5c>)
 80002c6:	4b15      	ldr	r3, [pc, #84]	@ (800031c <_sbrk+0x60>)
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002d0:	4b13      	ldr	r3, [pc, #76]	@ (8000320 <_sbrk+0x64>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d102      	bne.n	80002de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002d8:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <_sbrk+0x64>)
 80002da:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <_sbrk+0x68>)
 80002dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002de:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <_sbrk+0x64>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4413      	add	r3, r2
 80002e6:	693a      	ldr	r2, [r7, #16]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d207      	bcs.n	80002fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002ec:	f000 fa8c 	bl	8000808 <__errno>
 80002f0:	4603      	mov	r3, r0
 80002f2:	220c      	movs	r2, #12
 80002f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002fa:	e009      	b.n	8000310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80002fc:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <_sbrk+0x64>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000302:	4b07      	ldr	r3, [pc, #28]	@ (8000320 <_sbrk+0x64>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4413      	add	r3, r2
 800030a:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <_sbrk+0x64>)
 800030c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800030e:	68fb      	ldr	r3, [r7, #12]
}
 8000310:	4618      	mov	r0, r3
 8000312:	3718      	adds	r7, #24
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20018000 	.word	0x20018000
 800031c:	00000400 	.word	0x00000400
 8000320:	20000078 	.word	0x20000078
 8000324:	200001c8 	.word	0x200001c8

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 fa5d 	bl	8000814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ff3b 	bl	80001d4 <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800036c:	08000cfc 	.word	0x08000cfc
  ldr r2, =_sbss
 8000370:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000374:	200001c8 	.word	0x200001c8

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <std>:
 800037c:	2300      	movs	r3, #0
 800037e:	b510      	push	{r4, lr}
 8000380:	4604      	mov	r4, r0
 8000382:	e9c0 3300 	strd	r3, r3, [r0]
 8000386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800038a:	6083      	str	r3, [r0, #8]
 800038c:	8181      	strh	r1, [r0, #12]
 800038e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000390:	81c2      	strh	r2, [r0, #14]
 8000392:	6183      	str	r3, [r0, #24]
 8000394:	4619      	mov	r1, r3
 8000396:	2208      	movs	r2, #8
 8000398:	305c      	adds	r0, #92	@ 0x5c
 800039a:	f000 f9e7 	bl	800076c <memset>
 800039e:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <std+0x58>)
 80003a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80003a2:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <std+0x5c>)
 80003a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80003a6:	4b0d      	ldr	r3, [pc, #52]	@ (80003dc <std+0x60>)
 80003a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80003aa:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <std+0x64>)
 80003ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80003ae:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <std+0x68>)
 80003b0:	6224      	str	r4, [r4, #32]
 80003b2:	429c      	cmp	r4, r3
 80003b4:	d006      	beq.n	80003c4 <std+0x48>
 80003b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80003ba:	4294      	cmp	r4, r2
 80003bc:	d002      	beq.n	80003c4 <std+0x48>
 80003be:	33d0      	adds	r3, #208	@ 0xd0
 80003c0:	429c      	cmp	r4, r3
 80003c2:	d105      	bne.n	80003d0 <std+0x54>
 80003c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80003c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003cc:	f000 ba46 	b.w	800085c <__retarget_lock_init_recursive>
 80003d0:	bd10      	pop	{r4, pc}
 80003d2:	bf00      	nop
 80003d4:	080005bd 	.word	0x080005bd
 80003d8:	080005df 	.word	0x080005df
 80003dc:	08000617 	.word	0x08000617
 80003e0:	0800063b 	.word	0x0800063b
 80003e4:	2000007c 	.word	0x2000007c

080003e8 <stdio_exit_handler>:
 80003e8:	4a02      	ldr	r2, [pc, #8]	@ (80003f4 <stdio_exit_handler+0xc>)
 80003ea:	4903      	ldr	r1, [pc, #12]	@ (80003f8 <stdio_exit_handler+0x10>)
 80003ec:	4803      	ldr	r0, [pc, #12]	@ (80003fc <stdio_exit_handler+0x14>)
 80003ee:	f000 b869 	b.w	80004c4 <_fwalk_sglue>
 80003f2:	bf00      	nop
 80003f4:	20000000 	.word	0x20000000
 80003f8:	08000b55 	.word	0x08000b55
 80003fc:	20000010 	.word	0x20000010

08000400 <cleanup_stdio>:
 8000400:	6841      	ldr	r1, [r0, #4]
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <cleanup_stdio+0x34>)
 8000404:	4299      	cmp	r1, r3
 8000406:	b510      	push	{r4, lr}
 8000408:	4604      	mov	r4, r0
 800040a:	d001      	beq.n	8000410 <cleanup_stdio+0x10>
 800040c:	f000 fba2 	bl	8000b54 <_fflush_r>
 8000410:	68a1      	ldr	r1, [r4, #8]
 8000412:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <cleanup_stdio+0x38>)
 8000414:	4299      	cmp	r1, r3
 8000416:	d002      	beq.n	800041e <cleanup_stdio+0x1e>
 8000418:	4620      	mov	r0, r4
 800041a:	f000 fb9b 	bl	8000b54 <_fflush_r>
 800041e:	68e1      	ldr	r1, [r4, #12]
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <cleanup_stdio+0x3c>)
 8000422:	4299      	cmp	r1, r3
 8000424:	d004      	beq.n	8000430 <cleanup_stdio+0x30>
 8000426:	4620      	mov	r0, r4
 8000428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800042c:	f000 bb92 	b.w	8000b54 <_fflush_r>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	bf00      	nop
 8000434:	2000007c 	.word	0x2000007c
 8000438:	200000e4 	.word	0x200000e4
 800043c:	2000014c 	.word	0x2000014c

08000440 <global_stdio_init.part.0>:
 8000440:	b510      	push	{r4, lr}
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <global_stdio_init.part.0+0x30>)
 8000444:	4c0b      	ldr	r4, [pc, #44]	@ (8000474 <global_stdio_init.part.0+0x34>)
 8000446:	4a0c      	ldr	r2, [pc, #48]	@ (8000478 <global_stdio_init.part.0+0x38>)
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	4620      	mov	r0, r4
 800044c:	2200      	movs	r2, #0
 800044e:	2104      	movs	r1, #4
 8000450:	f7ff ff94 	bl	800037c <std>
 8000454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000458:	2201      	movs	r2, #1
 800045a:	2109      	movs	r1, #9
 800045c:	f7ff ff8e 	bl	800037c <std>
 8000460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000464:	2202      	movs	r2, #2
 8000466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800046a:	2112      	movs	r1, #18
 800046c:	f7ff bf86 	b.w	800037c <std>
 8000470:	200001b4 	.word	0x200001b4
 8000474:	2000007c 	.word	0x2000007c
 8000478:	080003e9 	.word	0x080003e9

0800047c <__sfp_lock_acquire>:
 800047c:	4801      	ldr	r0, [pc, #4]	@ (8000484 <__sfp_lock_acquire+0x8>)
 800047e:	f000 b9ee 	b.w	800085e <__retarget_lock_acquire_recursive>
 8000482:	bf00      	nop
 8000484:	200001bd 	.word	0x200001bd

08000488 <__sfp_lock_release>:
 8000488:	4801      	ldr	r0, [pc, #4]	@ (8000490 <__sfp_lock_release+0x8>)
 800048a:	f000 b9e9 	b.w	8000860 <__retarget_lock_release_recursive>
 800048e:	bf00      	nop
 8000490:	200001bd 	.word	0x200001bd

08000494 <__sinit>:
 8000494:	b510      	push	{r4, lr}
 8000496:	4604      	mov	r4, r0
 8000498:	f7ff fff0 	bl	800047c <__sfp_lock_acquire>
 800049c:	6a23      	ldr	r3, [r4, #32]
 800049e:	b11b      	cbz	r3, 80004a8 <__sinit+0x14>
 80004a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004a4:	f7ff bff0 	b.w	8000488 <__sfp_lock_release>
 80004a8:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <__sinit+0x28>)
 80004aa:	6223      	str	r3, [r4, #32]
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <__sinit+0x2c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d1f5      	bne.n	80004a0 <__sinit+0xc>
 80004b4:	f7ff ffc4 	bl	8000440 <global_stdio_init.part.0>
 80004b8:	e7f2      	b.n	80004a0 <__sinit+0xc>
 80004ba:	bf00      	nop
 80004bc:	08000401 	.word	0x08000401
 80004c0:	200001b4 	.word	0x200001b4

080004c4 <_fwalk_sglue>:
 80004c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004c8:	4607      	mov	r7, r0
 80004ca:	4688      	mov	r8, r1
 80004cc:	4614      	mov	r4, r2
 80004ce:	2600      	movs	r6, #0
 80004d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80004d4:	f1b9 0901 	subs.w	r9, r9, #1
 80004d8:	d505      	bpl.n	80004e6 <_fwalk_sglue+0x22>
 80004da:	6824      	ldr	r4, [r4, #0]
 80004dc:	2c00      	cmp	r4, #0
 80004de:	d1f7      	bne.n	80004d0 <_fwalk_sglue+0xc>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80004e6:	89ab      	ldrh	r3, [r5, #12]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d907      	bls.n	80004fc <_fwalk_sglue+0x38>
 80004ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80004f0:	3301      	adds	r3, #1
 80004f2:	d003      	beq.n	80004fc <_fwalk_sglue+0x38>
 80004f4:	4629      	mov	r1, r5
 80004f6:	4638      	mov	r0, r7
 80004f8:	47c0      	blx	r8
 80004fa:	4306      	orrs	r6, r0
 80004fc:	3568      	adds	r5, #104	@ 0x68
 80004fe:	e7e9      	b.n	80004d4 <_fwalk_sglue+0x10>

08000500 <_puts_r>:
 8000500:	6a03      	ldr	r3, [r0, #32]
 8000502:	b570      	push	{r4, r5, r6, lr}
 8000504:	6884      	ldr	r4, [r0, #8]
 8000506:	4605      	mov	r5, r0
 8000508:	460e      	mov	r6, r1
 800050a:	b90b      	cbnz	r3, 8000510 <_puts_r+0x10>
 800050c:	f7ff ffc2 	bl	8000494 <__sinit>
 8000510:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000512:	07db      	lsls	r3, r3, #31
 8000514:	d405      	bmi.n	8000522 <_puts_r+0x22>
 8000516:	89a3      	ldrh	r3, [r4, #12]
 8000518:	0598      	lsls	r0, r3, #22
 800051a:	d402      	bmi.n	8000522 <_puts_r+0x22>
 800051c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800051e:	f000 f99e 	bl	800085e <__retarget_lock_acquire_recursive>
 8000522:	89a3      	ldrh	r3, [r4, #12]
 8000524:	0719      	lsls	r1, r3, #28
 8000526:	d502      	bpl.n	800052e <_puts_r+0x2e>
 8000528:	6923      	ldr	r3, [r4, #16]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d135      	bne.n	800059a <_puts_r+0x9a>
 800052e:	4621      	mov	r1, r4
 8000530:	4628      	mov	r0, r5
 8000532:	f000 f8c5 	bl	80006c0 <__swsetup_r>
 8000536:	b380      	cbz	r0, 800059a <_puts_r+0x9a>
 8000538:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800053c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800053e:	07da      	lsls	r2, r3, #31
 8000540:	d405      	bmi.n	800054e <_puts_r+0x4e>
 8000542:	89a3      	ldrh	r3, [r4, #12]
 8000544:	059b      	lsls	r3, r3, #22
 8000546:	d402      	bmi.n	800054e <_puts_r+0x4e>
 8000548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800054a:	f000 f989 	bl	8000860 <__retarget_lock_release_recursive>
 800054e:	4628      	mov	r0, r5
 8000550:	bd70      	pop	{r4, r5, r6, pc}
 8000552:	2b00      	cmp	r3, #0
 8000554:	da04      	bge.n	8000560 <_puts_r+0x60>
 8000556:	69a2      	ldr	r2, [r4, #24]
 8000558:	429a      	cmp	r2, r3
 800055a:	dc17      	bgt.n	800058c <_puts_r+0x8c>
 800055c:	290a      	cmp	r1, #10
 800055e:	d015      	beq.n	800058c <_puts_r+0x8c>
 8000560:	6823      	ldr	r3, [r4, #0]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	6022      	str	r2, [r4, #0]
 8000566:	7019      	strb	r1, [r3, #0]
 8000568:	68a3      	ldr	r3, [r4, #8]
 800056a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800056e:	3b01      	subs	r3, #1
 8000570:	60a3      	str	r3, [r4, #8]
 8000572:	2900      	cmp	r1, #0
 8000574:	d1ed      	bne.n	8000552 <_puts_r+0x52>
 8000576:	2b00      	cmp	r3, #0
 8000578:	da11      	bge.n	800059e <_puts_r+0x9e>
 800057a:	4622      	mov	r2, r4
 800057c:	210a      	movs	r1, #10
 800057e:	4628      	mov	r0, r5
 8000580:	f000 f85f 	bl	8000642 <__swbuf_r>
 8000584:	3001      	adds	r0, #1
 8000586:	d0d7      	beq.n	8000538 <_puts_r+0x38>
 8000588:	250a      	movs	r5, #10
 800058a:	e7d7      	b.n	800053c <_puts_r+0x3c>
 800058c:	4622      	mov	r2, r4
 800058e:	4628      	mov	r0, r5
 8000590:	f000 f857 	bl	8000642 <__swbuf_r>
 8000594:	3001      	adds	r0, #1
 8000596:	d1e7      	bne.n	8000568 <_puts_r+0x68>
 8000598:	e7ce      	b.n	8000538 <_puts_r+0x38>
 800059a:	3e01      	subs	r6, #1
 800059c:	e7e4      	b.n	8000568 <_puts_r+0x68>
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	6022      	str	r2, [r4, #0]
 80005a4:	220a      	movs	r2, #10
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	e7ee      	b.n	8000588 <_puts_r+0x88>
	...

080005ac <puts>:
 80005ac:	4b02      	ldr	r3, [pc, #8]	@ (80005b8 <puts+0xc>)
 80005ae:	4601      	mov	r1, r0
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	f7ff bfa5 	b.w	8000500 <_puts_r>
 80005b6:	bf00      	nop
 80005b8:	2000000c 	.word	0x2000000c

080005bc <__sread>:
 80005bc:	b510      	push	{r4, lr}
 80005be:	460c      	mov	r4, r1
 80005c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80005c4:	f000 f8fc 	bl	80007c0 <_read_r>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	bfab      	itete	ge
 80005cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80005ce:	89a3      	ldrhlt	r3, [r4, #12]
 80005d0:	181b      	addge	r3, r3, r0
 80005d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80005d6:	bfac      	ite	ge
 80005d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80005da:	81a3      	strhlt	r3, [r4, #12]
 80005dc:	bd10      	pop	{r4, pc}

080005de <__swrite>:
 80005de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005e2:	461f      	mov	r7, r3
 80005e4:	898b      	ldrh	r3, [r1, #12]
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	4605      	mov	r5, r0
 80005ea:	460c      	mov	r4, r1
 80005ec:	4616      	mov	r6, r2
 80005ee:	d505      	bpl.n	80005fc <__swrite+0x1e>
 80005f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80005f4:	2302      	movs	r3, #2
 80005f6:	2200      	movs	r2, #0
 80005f8:	f000 f8d0 	bl	800079c <_lseek_r>
 80005fc:	89a3      	ldrh	r3, [r4, #12]
 80005fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000602:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000606:	81a3      	strh	r3, [r4, #12]
 8000608:	4632      	mov	r2, r6
 800060a:	463b      	mov	r3, r7
 800060c:	4628      	mov	r0, r5
 800060e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000612:	f000 b8e7 	b.w	80007e4 <_write_r>

08000616 <__sseek>:
 8000616:	b510      	push	{r4, lr}
 8000618:	460c      	mov	r4, r1
 800061a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800061e:	f000 f8bd 	bl	800079c <_lseek_r>
 8000622:	1c43      	adds	r3, r0, #1
 8000624:	89a3      	ldrh	r3, [r4, #12]
 8000626:	bf15      	itete	ne
 8000628:	6560      	strne	r0, [r4, #84]	@ 0x54
 800062a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800062e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000632:	81a3      	strheq	r3, [r4, #12]
 8000634:	bf18      	it	ne
 8000636:	81a3      	strhne	r3, [r4, #12]
 8000638:	bd10      	pop	{r4, pc}

0800063a <__sclose>:
 800063a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800063e:	f000 b89d 	b.w	800077c <_close_r>

08000642 <__swbuf_r>:
 8000642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000644:	460e      	mov	r6, r1
 8000646:	4614      	mov	r4, r2
 8000648:	4605      	mov	r5, r0
 800064a:	b118      	cbz	r0, 8000654 <__swbuf_r+0x12>
 800064c:	6a03      	ldr	r3, [r0, #32]
 800064e:	b90b      	cbnz	r3, 8000654 <__swbuf_r+0x12>
 8000650:	f7ff ff20 	bl	8000494 <__sinit>
 8000654:	69a3      	ldr	r3, [r4, #24]
 8000656:	60a3      	str	r3, [r4, #8]
 8000658:	89a3      	ldrh	r3, [r4, #12]
 800065a:	071a      	lsls	r2, r3, #28
 800065c:	d501      	bpl.n	8000662 <__swbuf_r+0x20>
 800065e:	6923      	ldr	r3, [r4, #16]
 8000660:	b943      	cbnz	r3, 8000674 <__swbuf_r+0x32>
 8000662:	4621      	mov	r1, r4
 8000664:	4628      	mov	r0, r5
 8000666:	f000 f82b 	bl	80006c0 <__swsetup_r>
 800066a:	b118      	cbz	r0, 8000674 <__swbuf_r+0x32>
 800066c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000670:	4638      	mov	r0, r7
 8000672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000674:	6823      	ldr	r3, [r4, #0]
 8000676:	6922      	ldr	r2, [r4, #16]
 8000678:	1a98      	subs	r0, r3, r2
 800067a:	6963      	ldr	r3, [r4, #20]
 800067c:	b2f6      	uxtb	r6, r6
 800067e:	4283      	cmp	r3, r0
 8000680:	4637      	mov	r7, r6
 8000682:	dc05      	bgt.n	8000690 <__swbuf_r+0x4e>
 8000684:	4621      	mov	r1, r4
 8000686:	4628      	mov	r0, r5
 8000688:	f000 fa64 	bl	8000b54 <_fflush_r>
 800068c:	2800      	cmp	r0, #0
 800068e:	d1ed      	bne.n	800066c <__swbuf_r+0x2a>
 8000690:	68a3      	ldr	r3, [r4, #8]
 8000692:	3b01      	subs	r3, #1
 8000694:	60a3      	str	r3, [r4, #8]
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	6022      	str	r2, [r4, #0]
 800069c:	701e      	strb	r6, [r3, #0]
 800069e:	6962      	ldr	r2, [r4, #20]
 80006a0:	1c43      	adds	r3, r0, #1
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d004      	beq.n	80006b0 <__swbuf_r+0x6e>
 80006a6:	89a3      	ldrh	r3, [r4, #12]
 80006a8:	07db      	lsls	r3, r3, #31
 80006aa:	d5e1      	bpl.n	8000670 <__swbuf_r+0x2e>
 80006ac:	2e0a      	cmp	r6, #10
 80006ae:	d1df      	bne.n	8000670 <__swbuf_r+0x2e>
 80006b0:	4621      	mov	r1, r4
 80006b2:	4628      	mov	r0, r5
 80006b4:	f000 fa4e 	bl	8000b54 <_fflush_r>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d0d9      	beq.n	8000670 <__swbuf_r+0x2e>
 80006bc:	e7d6      	b.n	800066c <__swbuf_r+0x2a>
	...

080006c0 <__swsetup_r>:
 80006c0:	b538      	push	{r3, r4, r5, lr}
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <__swsetup_r+0xa8>)
 80006c4:	4605      	mov	r5, r0
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	460c      	mov	r4, r1
 80006ca:	b118      	cbz	r0, 80006d4 <__swsetup_r+0x14>
 80006cc:	6a03      	ldr	r3, [r0, #32]
 80006ce:	b90b      	cbnz	r3, 80006d4 <__swsetup_r+0x14>
 80006d0:	f7ff fee0 	bl	8000494 <__sinit>
 80006d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80006d8:	0719      	lsls	r1, r3, #28
 80006da:	d422      	bmi.n	8000722 <__swsetup_r+0x62>
 80006dc:	06da      	lsls	r2, r3, #27
 80006de:	d407      	bmi.n	80006f0 <__swsetup_r+0x30>
 80006e0:	2209      	movs	r2, #9
 80006e2:	602a      	str	r2, [r5, #0]
 80006e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006e8:	81a3      	strh	r3, [r4, #12]
 80006ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006ee:	e033      	b.n	8000758 <__swsetup_r+0x98>
 80006f0:	0758      	lsls	r0, r3, #29
 80006f2:	d512      	bpl.n	800071a <__swsetup_r+0x5a>
 80006f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80006f6:	b141      	cbz	r1, 800070a <__swsetup_r+0x4a>
 80006f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80006fc:	4299      	cmp	r1, r3
 80006fe:	d002      	beq.n	8000706 <__swsetup_r+0x46>
 8000700:	4628      	mov	r0, r5
 8000702:	f000 f8af 	bl	8000864 <_free_r>
 8000706:	2300      	movs	r3, #0
 8000708:	6363      	str	r3, [r4, #52]	@ 0x34
 800070a:	89a3      	ldrh	r3, [r4, #12]
 800070c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000710:	81a3      	strh	r3, [r4, #12]
 8000712:	2300      	movs	r3, #0
 8000714:	6063      	str	r3, [r4, #4]
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	6023      	str	r3, [r4, #0]
 800071a:	89a3      	ldrh	r3, [r4, #12]
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	81a3      	strh	r3, [r4, #12]
 8000722:	6923      	ldr	r3, [r4, #16]
 8000724:	b94b      	cbnz	r3, 800073a <__swsetup_r+0x7a>
 8000726:	89a3      	ldrh	r3, [r4, #12]
 8000728:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800072c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000730:	d003      	beq.n	800073a <__swsetup_r+0x7a>
 8000732:	4621      	mov	r1, r4
 8000734:	4628      	mov	r0, r5
 8000736:	f000 fa5b 	bl	8000bf0 <__smakebuf_r>
 800073a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800073e:	f013 0201 	ands.w	r2, r3, #1
 8000742:	d00a      	beq.n	800075a <__swsetup_r+0x9a>
 8000744:	2200      	movs	r2, #0
 8000746:	60a2      	str	r2, [r4, #8]
 8000748:	6962      	ldr	r2, [r4, #20]
 800074a:	4252      	negs	r2, r2
 800074c:	61a2      	str	r2, [r4, #24]
 800074e:	6922      	ldr	r2, [r4, #16]
 8000750:	b942      	cbnz	r2, 8000764 <__swsetup_r+0xa4>
 8000752:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000756:	d1c5      	bne.n	80006e4 <__swsetup_r+0x24>
 8000758:	bd38      	pop	{r3, r4, r5, pc}
 800075a:	0799      	lsls	r1, r3, #30
 800075c:	bf58      	it	pl
 800075e:	6962      	ldrpl	r2, [r4, #20]
 8000760:	60a2      	str	r2, [r4, #8]
 8000762:	e7f4      	b.n	800074e <__swsetup_r+0x8e>
 8000764:	2000      	movs	r0, #0
 8000766:	e7f7      	b.n	8000758 <__swsetup_r+0x98>
 8000768:	2000000c 	.word	0x2000000c

0800076c <memset>:
 800076c:	4402      	add	r2, r0
 800076e:	4603      	mov	r3, r0
 8000770:	4293      	cmp	r3, r2
 8000772:	d100      	bne.n	8000776 <memset+0xa>
 8000774:	4770      	bx	lr
 8000776:	f803 1b01 	strb.w	r1, [r3], #1
 800077a:	e7f9      	b.n	8000770 <memset+0x4>

0800077c <_close_r>:
 800077c:	b538      	push	{r3, r4, r5, lr}
 800077e:	4d06      	ldr	r5, [pc, #24]	@ (8000798 <_close_r+0x1c>)
 8000780:	2300      	movs	r3, #0
 8000782:	4604      	mov	r4, r0
 8000784:	4608      	mov	r0, r1
 8000786:	602b      	str	r3, [r5, #0]
 8000788:	f7ff fd67 	bl	800025a <_close>
 800078c:	1c43      	adds	r3, r0, #1
 800078e:	d102      	bne.n	8000796 <_close_r+0x1a>
 8000790:	682b      	ldr	r3, [r5, #0]
 8000792:	b103      	cbz	r3, 8000796 <_close_r+0x1a>
 8000794:	6023      	str	r3, [r4, #0]
 8000796:	bd38      	pop	{r3, r4, r5, pc}
 8000798:	200001b8 	.word	0x200001b8

0800079c <_lseek_r>:
 800079c:	b538      	push	{r3, r4, r5, lr}
 800079e:	4d07      	ldr	r5, [pc, #28]	@ (80007bc <_lseek_r+0x20>)
 80007a0:	4604      	mov	r4, r0
 80007a2:	4608      	mov	r0, r1
 80007a4:	4611      	mov	r1, r2
 80007a6:	2200      	movs	r2, #0
 80007a8:	602a      	str	r2, [r5, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f7ff fd79 	bl	80002a2 <_lseek>
 80007b0:	1c43      	adds	r3, r0, #1
 80007b2:	d102      	bne.n	80007ba <_lseek_r+0x1e>
 80007b4:	682b      	ldr	r3, [r5, #0]
 80007b6:	b103      	cbz	r3, 80007ba <_lseek_r+0x1e>
 80007b8:	6023      	str	r3, [r4, #0]
 80007ba:	bd38      	pop	{r3, r4, r5, pc}
 80007bc:	200001b8 	.word	0x200001b8

080007c0 <_read_r>:
 80007c0:	b538      	push	{r3, r4, r5, lr}
 80007c2:	4d07      	ldr	r5, [pc, #28]	@ (80007e0 <_read_r+0x20>)
 80007c4:	4604      	mov	r4, r0
 80007c6:	4608      	mov	r0, r1
 80007c8:	4611      	mov	r1, r2
 80007ca:	2200      	movs	r2, #0
 80007cc:	602a      	str	r2, [r5, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	f7ff fd0a 	bl	80001e8 <_read>
 80007d4:	1c43      	adds	r3, r0, #1
 80007d6:	d102      	bne.n	80007de <_read_r+0x1e>
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	b103      	cbz	r3, 80007de <_read_r+0x1e>
 80007dc:	6023      	str	r3, [r4, #0]
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	200001b8 	.word	0x200001b8

080007e4 <_write_r>:
 80007e4:	b538      	push	{r3, r4, r5, lr}
 80007e6:	4d07      	ldr	r5, [pc, #28]	@ (8000804 <_write_r+0x20>)
 80007e8:	4604      	mov	r4, r0
 80007ea:	4608      	mov	r0, r1
 80007ec:	4611      	mov	r1, r2
 80007ee:	2200      	movs	r2, #0
 80007f0:	602a      	str	r2, [r5, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	f7ff fd15 	bl	8000222 <_write>
 80007f8:	1c43      	adds	r3, r0, #1
 80007fa:	d102      	bne.n	8000802 <_write_r+0x1e>
 80007fc:	682b      	ldr	r3, [r5, #0]
 80007fe:	b103      	cbz	r3, 8000802 <_write_r+0x1e>
 8000800:	6023      	str	r3, [r4, #0]
 8000802:	bd38      	pop	{r3, r4, r5, pc}
 8000804:	200001b8 	.word	0x200001b8

08000808 <__errno>:
 8000808:	4b01      	ldr	r3, [pc, #4]	@ (8000810 <__errno+0x8>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	2000000c 	.word	0x2000000c

08000814 <__libc_init_array>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	4d0d      	ldr	r5, [pc, #52]	@ (800084c <__libc_init_array+0x38>)
 8000818:	4c0d      	ldr	r4, [pc, #52]	@ (8000850 <__libc_init_array+0x3c>)
 800081a:	1b64      	subs	r4, r4, r5
 800081c:	10a4      	asrs	r4, r4, #2
 800081e:	2600      	movs	r6, #0
 8000820:	42a6      	cmp	r6, r4
 8000822:	d109      	bne.n	8000838 <__libc_init_array+0x24>
 8000824:	4d0b      	ldr	r5, [pc, #44]	@ (8000854 <__libc_init_array+0x40>)
 8000826:	4c0c      	ldr	r4, [pc, #48]	@ (8000858 <__libc_init_array+0x44>)
 8000828:	f000 fa50 	bl	8000ccc <_init>
 800082c:	1b64      	subs	r4, r4, r5
 800082e:	10a4      	asrs	r4, r4, #2
 8000830:	2600      	movs	r6, #0
 8000832:	42a6      	cmp	r6, r4
 8000834:	d105      	bne.n	8000842 <__libc_init_array+0x2e>
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f855 3b04 	ldr.w	r3, [r5], #4
 800083c:	4798      	blx	r3
 800083e:	3601      	adds	r6, #1
 8000840:	e7ee      	b.n	8000820 <__libc_init_array+0xc>
 8000842:	f855 3b04 	ldr.w	r3, [r5], #4
 8000846:	4798      	blx	r3
 8000848:	3601      	adds	r6, #1
 800084a:	e7f2      	b.n	8000832 <__libc_init_array+0x1e>
 800084c:	08000cf4 	.word	0x08000cf4
 8000850:	08000cf4 	.word	0x08000cf4
 8000854:	08000cf4 	.word	0x08000cf4
 8000858:	08000cf8 	.word	0x08000cf8

0800085c <__retarget_lock_init_recursive>:
 800085c:	4770      	bx	lr

0800085e <__retarget_lock_acquire_recursive>:
 800085e:	4770      	bx	lr

08000860 <__retarget_lock_release_recursive>:
 8000860:	4770      	bx	lr
	...

08000864 <_free_r>:
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4605      	mov	r5, r0
 8000868:	2900      	cmp	r1, #0
 800086a:	d041      	beq.n	80008f0 <_free_r+0x8c>
 800086c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000870:	1f0c      	subs	r4, r1, #4
 8000872:	2b00      	cmp	r3, #0
 8000874:	bfb8      	it	lt
 8000876:	18e4      	addlt	r4, r4, r3
 8000878:	f000 f8e0 	bl	8000a3c <__malloc_lock>
 800087c:	4a1d      	ldr	r2, [pc, #116]	@ (80008f4 <_free_r+0x90>)
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	b933      	cbnz	r3, 8000890 <_free_r+0x2c>
 8000882:	6063      	str	r3, [r4, #4]
 8000884:	6014      	str	r4, [r2, #0]
 8000886:	4628      	mov	r0, r5
 8000888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800088c:	f000 b8dc 	b.w	8000a48 <__malloc_unlock>
 8000890:	42a3      	cmp	r3, r4
 8000892:	d908      	bls.n	80008a6 <_free_r+0x42>
 8000894:	6820      	ldr	r0, [r4, #0]
 8000896:	1821      	adds	r1, r4, r0
 8000898:	428b      	cmp	r3, r1
 800089a:	bf01      	itttt	eq
 800089c:	6819      	ldreq	r1, [r3, #0]
 800089e:	685b      	ldreq	r3, [r3, #4]
 80008a0:	1809      	addeq	r1, r1, r0
 80008a2:	6021      	streq	r1, [r4, #0]
 80008a4:	e7ed      	b.n	8000882 <_free_r+0x1e>
 80008a6:	461a      	mov	r2, r3
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	b10b      	cbz	r3, 80008b0 <_free_r+0x4c>
 80008ac:	42a3      	cmp	r3, r4
 80008ae:	d9fa      	bls.n	80008a6 <_free_r+0x42>
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	1850      	adds	r0, r2, r1
 80008b4:	42a0      	cmp	r0, r4
 80008b6:	d10b      	bne.n	80008d0 <_free_r+0x6c>
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	4401      	add	r1, r0
 80008bc:	1850      	adds	r0, r2, r1
 80008be:	4283      	cmp	r3, r0
 80008c0:	6011      	str	r1, [r2, #0]
 80008c2:	d1e0      	bne.n	8000886 <_free_r+0x22>
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	6053      	str	r3, [r2, #4]
 80008ca:	4408      	add	r0, r1
 80008cc:	6010      	str	r0, [r2, #0]
 80008ce:	e7da      	b.n	8000886 <_free_r+0x22>
 80008d0:	d902      	bls.n	80008d8 <_free_r+0x74>
 80008d2:	230c      	movs	r3, #12
 80008d4:	602b      	str	r3, [r5, #0]
 80008d6:	e7d6      	b.n	8000886 <_free_r+0x22>
 80008d8:	6820      	ldr	r0, [r4, #0]
 80008da:	1821      	adds	r1, r4, r0
 80008dc:	428b      	cmp	r3, r1
 80008de:	bf04      	itt	eq
 80008e0:	6819      	ldreq	r1, [r3, #0]
 80008e2:	685b      	ldreq	r3, [r3, #4]
 80008e4:	6063      	str	r3, [r4, #4]
 80008e6:	bf04      	itt	eq
 80008e8:	1809      	addeq	r1, r1, r0
 80008ea:	6021      	streq	r1, [r4, #0]
 80008ec:	6054      	str	r4, [r2, #4]
 80008ee:	e7ca      	b.n	8000886 <_free_r+0x22>
 80008f0:	bd38      	pop	{r3, r4, r5, pc}
 80008f2:	bf00      	nop
 80008f4:	200001c4 	.word	0x200001c4

080008f8 <sbrk_aligned>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4e0f      	ldr	r6, [pc, #60]	@ (8000938 <sbrk_aligned+0x40>)
 80008fc:	460c      	mov	r4, r1
 80008fe:	6831      	ldr	r1, [r6, #0]
 8000900:	4605      	mov	r5, r0
 8000902:	b911      	cbnz	r1, 800090a <sbrk_aligned+0x12>
 8000904:	f000 f9d2 	bl	8000cac <_sbrk_r>
 8000908:	6030      	str	r0, [r6, #0]
 800090a:	4621      	mov	r1, r4
 800090c:	4628      	mov	r0, r5
 800090e:	f000 f9cd 	bl	8000cac <_sbrk_r>
 8000912:	1c43      	adds	r3, r0, #1
 8000914:	d103      	bne.n	800091e <sbrk_aligned+0x26>
 8000916:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800091a:	4620      	mov	r0, r4
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	1cc4      	adds	r4, r0, #3
 8000920:	f024 0403 	bic.w	r4, r4, #3
 8000924:	42a0      	cmp	r0, r4
 8000926:	d0f8      	beq.n	800091a <sbrk_aligned+0x22>
 8000928:	1a21      	subs	r1, r4, r0
 800092a:	4628      	mov	r0, r5
 800092c:	f000 f9be 	bl	8000cac <_sbrk_r>
 8000930:	3001      	adds	r0, #1
 8000932:	d1f2      	bne.n	800091a <sbrk_aligned+0x22>
 8000934:	e7ef      	b.n	8000916 <sbrk_aligned+0x1e>
 8000936:	bf00      	nop
 8000938:	200001c0 	.word	0x200001c0

0800093c <_malloc_r>:
 800093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000940:	1ccd      	adds	r5, r1, #3
 8000942:	f025 0503 	bic.w	r5, r5, #3
 8000946:	3508      	adds	r5, #8
 8000948:	2d0c      	cmp	r5, #12
 800094a:	bf38      	it	cc
 800094c:	250c      	movcc	r5, #12
 800094e:	2d00      	cmp	r5, #0
 8000950:	4606      	mov	r6, r0
 8000952:	db01      	blt.n	8000958 <_malloc_r+0x1c>
 8000954:	42a9      	cmp	r1, r5
 8000956:	d904      	bls.n	8000962 <_malloc_r+0x26>
 8000958:	230c      	movs	r3, #12
 800095a:	6033      	str	r3, [r6, #0]
 800095c:	2000      	movs	r0, #0
 800095e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a38 <_malloc_r+0xfc>
 8000966:	f000 f869 	bl	8000a3c <__malloc_lock>
 800096a:	f8d8 3000 	ldr.w	r3, [r8]
 800096e:	461c      	mov	r4, r3
 8000970:	bb44      	cbnz	r4, 80009c4 <_malloc_r+0x88>
 8000972:	4629      	mov	r1, r5
 8000974:	4630      	mov	r0, r6
 8000976:	f7ff ffbf 	bl	80008f8 <sbrk_aligned>
 800097a:	1c43      	adds	r3, r0, #1
 800097c:	4604      	mov	r4, r0
 800097e:	d158      	bne.n	8000a32 <_malloc_r+0xf6>
 8000980:	f8d8 4000 	ldr.w	r4, [r8]
 8000984:	4627      	mov	r7, r4
 8000986:	2f00      	cmp	r7, #0
 8000988:	d143      	bne.n	8000a12 <_malloc_r+0xd6>
 800098a:	2c00      	cmp	r4, #0
 800098c:	d04b      	beq.n	8000a26 <_malloc_r+0xea>
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	4639      	mov	r1, r7
 8000992:	4630      	mov	r0, r6
 8000994:	eb04 0903 	add.w	r9, r4, r3
 8000998:	f000 f988 	bl	8000cac <_sbrk_r>
 800099c:	4581      	cmp	r9, r0
 800099e:	d142      	bne.n	8000a26 <_malloc_r+0xea>
 80009a0:	6821      	ldr	r1, [r4, #0]
 80009a2:	1a6d      	subs	r5, r5, r1
 80009a4:	4629      	mov	r1, r5
 80009a6:	4630      	mov	r0, r6
 80009a8:	f7ff ffa6 	bl	80008f8 <sbrk_aligned>
 80009ac:	3001      	adds	r0, #1
 80009ae:	d03a      	beq.n	8000a26 <_malloc_r+0xea>
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	442b      	add	r3, r5
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	f8d8 3000 	ldr.w	r3, [r8]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	bb62      	cbnz	r2, 8000a18 <_malloc_r+0xdc>
 80009be:	f8c8 7000 	str.w	r7, [r8]
 80009c2:	e00f      	b.n	80009e4 <_malloc_r+0xa8>
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	1b52      	subs	r2, r2, r5
 80009c8:	d420      	bmi.n	8000a0c <_malloc_r+0xd0>
 80009ca:	2a0b      	cmp	r2, #11
 80009cc:	d917      	bls.n	80009fe <_malloc_r+0xc2>
 80009ce:	1961      	adds	r1, r4, r5
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	6025      	str	r5, [r4, #0]
 80009d4:	bf18      	it	ne
 80009d6:	6059      	strne	r1, [r3, #4]
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	bf08      	it	eq
 80009dc:	f8c8 1000 	streq.w	r1, [r8]
 80009e0:	5162      	str	r2, [r4, r5]
 80009e2:	604b      	str	r3, [r1, #4]
 80009e4:	4630      	mov	r0, r6
 80009e6:	f000 f82f 	bl	8000a48 <__malloc_unlock>
 80009ea:	f104 000b 	add.w	r0, r4, #11
 80009ee:	1d23      	adds	r3, r4, #4
 80009f0:	f020 0007 	bic.w	r0, r0, #7
 80009f4:	1ac2      	subs	r2, r0, r3
 80009f6:	bf1c      	itt	ne
 80009f8:	1a1b      	subne	r3, r3, r0
 80009fa:	50a3      	strne	r3, [r4, r2]
 80009fc:	e7af      	b.n	800095e <_malloc_r+0x22>
 80009fe:	6862      	ldr	r2, [r4, #4]
 8000a00:	42a3      	cmp	r3, r4
 8000a02:	bf0c      	ite	eq
 8000a04:	f8c8 2000 	streq.w	r2, [r8]
 8000a08:	605a      	strne	r2, [r3, #4]
 8000a0a:	e7eb      	b.n	80009e4 <_malloc_r+0xa8>
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	6864      	ldr	r4, [r4, #4]
 8000a10:	e7ae      	b.n	8000970 <_malloc_r+0x34>
 8000a12:	463c      	mov	r4, r7
 8000a14:	687f      	ldr	r7, [r7, #4]
 8000a16:	e7b6      	b.n	8000986 <_malloc_r+0x4a>
 8000a18:	461a      	mov	r2, r3
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d1fb      	bne.n	8000a18 <_malloc_r+0xdc>
 8000a20:	2300      	movs	r3, #0
 8000a22:	6053      	str	r3, [r2, #4]
 8000a24:	e7de      	b.n	80009e4 <_malloc_r+0xa8>
 8000a26:	230c      	movs	r3, #12
 8000a28:	6033      	str	r3, [r6, #0]
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f000 f80c 	bl	8000a48 <__malloc_unlock>
 8000a30:	e794      	b.n	800095c <_malloc_r+0x20>
 8000a32:	6005      	str	r5, [r0, #0]
 8000a34:	e7d6      	b.n	80009e4 <_malloc_r+0xa8>
 8000a36:	bf00      	nop
 8000a38:	200001c4 	.word	0x200001c4

08000a3c <__malloc_lock>:
 8000a3c:	4801      	ldr	r0, [pc, #4]	@ (8000a44 <__malloc_lock+0x8>)
 8000a3e:	f7ff bf0e 	b.w	800085e <__retarget_lock_acquire_recursive>
 8000a42:	bf00      	nop
 8000a44:	200001bc 	.word	0x200001bc

08000a48 <__malloc_unlock>:
 8000a48:	4801      	ldr	r0, [pc, #4]	@ (8000a50 <__malloc_unlock+0x8>)
 8000a4a:	f7ff bf09 	b.w	8000860 <__retarget_lock_release_recursive>
 8000a4e:	bf00      	nop
 8000a50:	200001bc 	.word	0x200001bc

08000a54 <__sflush_r>:
 8000a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	0716      	lsls	r6, r2, #28
 8000a5c:	4605      	mov	r5, r0
 8000a5e:	460c      	mov	r4, r1
 8000a60:	d454      	bmi.n	8000b0c <__sflush_r+0xb8>
 8000a62:	684b      	ldr	r3, [r1, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dc02      	bgt.n	8000a6e <__sflush_r+0x1a>
 8000a68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dd48      	ble.n	8000b00 <__sflush_r+0xac>
 8000a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d045      	beq.n	8000b00 <__sflush_r+0xac>
 8000a74:	2300      	movs	r3, #0
 8000a76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000a7a:	682f      	ldr	r7, [r5, #0]
 8000a7c:	6a21      	ldr	r1, [r4, #32]
 8000a7e:	602b      	str	r3, [r5, #0]
 8000a80:	d030      	beq.n	8000ae4 <__sflush_r+0x90>
 8000a82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000a84:	89a3      	ldrh	r3, [r4, #12]
 8000a86:	0759      	lsls	r1, r3, #29
 8000a88:	d505      	bpl.n	8000a96 <__sflush_r+0x42>
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	1ad2      	subs	r2, r2, r3
 8000a8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000a90:	b10b      	cbz	r3, 8000a96 <__sflush_r+0x42>
 8000a92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a94:	1ad2      	subs	r2, r2, r3
 8000a96:	2300      	movs	r3, #0
 8000a98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a9a:	6a21      	ldr	r1, [r4, #32]
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	47b0      	blx	r6
 8000aa0:	1c43      	adds	r3, r0, #1
 8000aa2:	89a3      	ldrh	r3, [r4, #12]
 8000aa4:	d106      	bne.n	8000ab4 <__sflush_r+0x60>
 8000aa6:	6829      	ldr	r1, [r5, #0]
 8000aa8:	291d      	cmp	r1, #29
 8000aaa:	d82b      	bhi.n	8000b04 <__sflush_r+0xb0>
 8000aac:	4a28      	ldr	r2, [pc, #160]	@ (8000b50 <__sflush_r+0xfc>)
 8000aae:	410a      	asrs	r2, r1
 8000ab0:	07d6      	lsls	r6, r2, #31
 8000ab2:	d427      	bmi.n	8000b04 <__sflush_r+0xb0>
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6062      	str	r2, [r4, #4]
 8000ab8:	04d9      	lsls	r1, r3, #19
 8000aba:	6922      	ldr	r2, [r4, #16]
 8000abc:	6022      	str	r2, [r4, #0]
 8000abe:	d504      	bpl.n	8000aca <__sflush_r+0x76>
 8000ac0:	1c42      	adds	r2, r0, #1
 8000ac2:	d101      	bne.n	8000ac8 <__sflush_r+0x74>
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	b903      	cbnz	r3, 8000aca <__sflush_r+0x76>
 8000ac8:	6560      	str	r0, [r4, #84]	@ 0x54
 8000aca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000acc:	602f      	str	r7, [r5, #0]
 8000ace:	b1b9      	cbz	r1, 8000b00 <__sflush_r+0xac>
 8000ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d002      	beq.n	8000ade <__sflush_r+0x8a>
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f7ff fec3 	bl	8000864 <_free_r>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ae2:	e00d      	b.n	8000b00 <__sflush_r+0xac>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	47b0      	blx	r6
 8000aea:	4602      	mov	r2, r0
 8000aec:	1c50      	adds	r0, r2, #1
 8000aee:	d1c9      	bne.n	8000a84 <__sflush_r+0x30>
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0c6      	beq.n	8000a84 <__sflush_r+0x30>
 8000af6:	2b1d      	cmp	r3, #29
 8000af8:	d001      	beq.n	8000afe <__sflush_r+0xaa>
 8000afa:	2b16      	cmp	r3, #22
 8000afc:	d11d      	bne.n	8000b3a <__sflush_r+0xe6>
 8000afe:	602f      	str	r7, [r5, #0]
 8000b00:	2000      	movs	r0, #0
 8000b02:	e021      	b.n	8000b48 <__sflush_r+0xf4>
 8000b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	e01a      	b.n	8000b42 <__sflush_r+0xee>
 8000b0c:	690f      	ldr	r7, [r1, #16]
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d0f6      	beq.n	8000b00 <__sflush_r+0xac>
 8000b12:	0793      	lsls	r3, r2, #30
 8000b14:	680e      	ldr	r6, [r1, #0]
 8000b16:	bf08      	it	eq
 8000b18:	694b      	ldreq	r3, [r1, #20]
 8000b1a:	600f      	str	r7, [r1, #0]
 8000b1c:	bf18      	it	ne
 8000b1e:	2300      	movne	r3, #0
 8000b20:	1bf6      	subs	r6, r6, r7
 8000b22:	608b      	str	r3, [r1, #8]
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	ddeb      	ble.n	8000b00 <__sflush_r+0xac>
 8000b28:	6a21      	ldr	r1, [r4, #32]
 8000b2a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000b2e:	4633      	mov	r3, r6
 8000b30:	463a      	mov	r2, r7
 8000b32:	4628      	mov	r0, r5
 8000b34:	47e0      	blx	ip
 8000b36:	2800      	cmp	r0, #0
 8000b38:	dc07      	bgt.n	8000b4a <__sflush_r+0xf6>
 8000b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b42:	81a3      	strh	r3, [r4, #12]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4a:	4407      	add	r7, r0
 8000b4c:	1a36      	subs	r6, r6, r0
 8000b4e:	e7e9      	b.n	8000b24 <__sflush_r+0xd0>
 8000b50:	dfbffffe 	.word	0xdfbffffe

08000b54 <_fflush_r>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	690b      	ldr	r3, [r1, #16]
 8000b58:	4605      	mov	r5, r0
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	b913      	cbnz	r3, 8000b64 <_fflush_r+0x10>
 8000b5e:	2500      	movs	r5, #0
 8000b60:	4628      	mov	r0, r5
 8000b62:	bd38      	pop	{r3, r4, r5, pc}
 8000b64:	b118      	cbz	r0, 8000b6e <_fflush_r+0x1a>
 8000b66:	6a03      	ldr	r3, [r0, #32]
 8000b68:	b90b      	cbnz	r3, 8000b6e <_fflush_r+0x1a>
 8000b6a:	f7ff fc93 	bl	8000494 <__sinit>
 8000b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f3      	beq.n	8000b5e <_fflush_r+0xa>
 8000b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000b78:	07d0      	lsls	r0, r2, #31
 8000b7a:	d404      	bmi.n	8000b86 <_fflush_r+0x32>
 8000b7c:	0599      	lsls	r1, r3, #22
 8000b7e:	d402      	bmi.n	8000b86 <_fflush_r+0x32>
 8000b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b82:	f7ff fe6c 	bl	800085e <__retarget_lock_acquire_recursive>
 8000b86:	4628      	mov	r0, r5
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f7ff ff63 	bl	8000a54 <__sflush_r>
 8000b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b90:	07da      	lsls	r2, r3, #31
 8000b92:	4605      	mov	r5, r0
 8000b94:	d4e4      	bmi.n	8000b60 <_fflush_r+0xc>
 8000b96:	89a3      	ldrh	r3, [r4, #12]
 8000b98:	059b      	lsls	r3, r3, #22
 8000b9a:	d4e1      	bmi.n	8000b60 <_fflush_r+0xc>
 8000b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b9e:	f7ff fe5f 	bl	8000860 <__retarget_lock_release_recursive>
 8000ba2:	e7dd      	b.n	8000b60 <_fflush_r+0xc>

08000ba4 <__swhatbuf_r>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bac:	2900      	cmp	r1, #0
 8000bae:	b096      	sub	sp, #88	@ 0x58
 8000bb0:	4615      	mov	r5, r2
 8000bb2:	461e      	mov	r6, r3
 8000bb4:	da0d      	bge.n	8000bd2 <__swhatbuf_r+0x2e>
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000bbc:	f04f 0100 	mov.w	r1, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2340      	movne	r3, #64	@ 0x40
 8000bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000bc8:	2000      	movs	r0, #0
 8000bca:	6031      	str	r1, [r6, #0]
 8000bcc:	602b      	str	r3, [r5, #0]
 8000bce:	b016      	add	sp, #88	@ 0x58
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 8000bd2:	466a      	mov	r2, sp
 8000bd4:	f000 f848 	bl	8000c68 <_fstat_r>
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	dbec      	blt.n	8000bb6 <__swhatbuf_r+0x12>
 8000bdc:	9901      	ldr	r1, [sp, #4]
 8000bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000be6:	4259      	negs	r1, r3
 8000be8:	4159      	adcs	r1, r3
 8000bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bee:	e7eb      	b.n	8000bc8 <__swhatbuf_r+0x24>

08000bf0 <__smakebuf_r>:
 8000bf0:	898b      	ldrh	r3, [r1, #12]
 8000bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bf4:	079d      	lsls	r5, r3, #30
 8000bf6:	4606      	mov	r6, r0
 8000bf8:	460c      	mov	r4, r1
 8000bfa:	d507      	bpl.n	8000c0c <__smakebuf_r+0x1c>
 8000bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000c00:	6023      	str	r3, [r4, #0]
 8000c02:	6123      	str	r3, [r4, #16]
 8000c04:	2301      	movs	r3, #1
 8000c06:	6163      	str	r3, [r4, #20]
 8000c08:	b003      	add	sp, #12
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	ab01      	add	r3, sp, #4
 8000c0e:	466a      	mov	r2, sp
 8000c10:	f7ff ffc8 	bl	8000ba4 <__swhatbuf_r>
 8000c14:	9f00      	ldr	r7, [sp, #0]
 8000c16:	4605      	mov	r5, r0
 8000c18:	4639      	mov	r1, r7
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f7ff fe8e 	bl	800093c <_malloc_r>
 8000c20:	b948      	cbnz	r0, 8000c36 <__smakebuf_r+0x46>
 8000c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c26:	059a      	lsls	r2, r3, #22
 8000c28:	d4ee      	bmi.n	8000c08 <__smakebuf_r+0x18>
 8000c2a:	f023 0303 	bic.w	r3, r3, #3
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	81a3      	strh	r3, [r4, #12]
 8000c34:	e7e2      	b.n	8000bfc <__smakebuf_r+0xc>
 8000c36:	89a3      	ldrh	r3, [r4, #12]
 8000c38:	6020      	str	r0, [r4, #0]
 8000c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3e:	81a3      	strh	r3, [r4, #12]
 8000c40:	9b01      	ldr	r3, [sp, #4]
 8000c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000c46:	b15b      	cbz	r3, 8000c60 <__smakebuf_r+0x70>
 8000c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	f000 f81d 	bl	8000c8c <_isatty_r>
 8000c52:	b128      	cbz	r0, 8000c60 <__smakebuf_r+0x70>
 8000c54:	89a3      	ldrh	r3, [r4, #12]
 8000c56:	f023 0303 	bic.w	r3, r3, #3
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	81a3      	strh	r3, [r4, #12]
 8000c60:	89a3      	ldrh	r3, [r4, #12]
 8000c62:	431d      	orrs	r5, r3
 8000c64:	81a5      	strh	r5, [r4, #12]
 8000c66:	e7cf      	b.n	8000c08 <__smakebuf_r+0x18>

08000c68 <_fstat_r>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4d07      	ldr	r5, [pc, #28]	@ (8000c88 <_fstat_r+0x20>)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	602b      	str	r3, [r5, #0]
 8000c76:	f7ff fafb 	bl	8000270 <_fstat>
 8000c7a:	1c43      	adds	r3, r0, #1
 8000c7c:	d102      	bne.n	8000c84 <_fstat_r+0x1c>
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	b103      	cbz	r3, 8000c84 <_fstat_r+0x1c>
 8000c82:	6023      	str	r3, [r4, #0]
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop
 8000c88:	200001b8 	.word	0x200001b8

08000c8c <_isatty_r>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	4d06      	ldr	r5, [pc, #24]	@ (8000ca8 <_isatty_r+0x1c>)
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	602b      	str	r3, [r5, #0]
 8000c98:	f7ff faf9 	bl	800028e <_isatty>
 8000c9c:	1c43      	adds	r3, r0, #1
 8000c9e:	d102      	bne.n	8000ca6 <_isatty_r+0x1a>
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	b103      	cbz	r3, 8000ca6 <_isatty_r+0x1a>
 8000ca4:	6023      	str	r3, [r4, #0]
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}
 8000ca8:	200001b8 	.word	0x200001b8

08000cac <_sbrk_r>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4d06      	ldr	r5, [pc, #24]	@ (8000cc8 <_sbrk_r+0x1c>)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	602b      	str	r3, [r5, #0]
 8000cb8:	f7ff fb00 	bl	80002bc <_sbrk>
 8000cbc:	1c43      	adds	r3, r0, #1
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk_r+0x1a>
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	b103      	cbz	r3, 8000cc6 <_sbrk_r+0x1a>
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	bd38      	pop	{r3, r4, r5, pc}
 8000cc8:	200001b8 	.word	0x200001b8

08000ccc <_init>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr

08000cd8 <_fini>:
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cda:	bf00      	nop
 8000cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cde:	bc08      	pop	{r3}
 8000ce0:	469e      	mov	lr, r3
 8000ce2:	4770      	bx	lr
